{"version":3,"sources":["utils/format.js","utils/query.js","components/ControlsRow/index.jsx","components/WeatherRows/CurrentWeather/index.jsx","components/WeatherRows/ForecastWeather/index.jsx","components/WeatherRows/index.jsx","actions/types.js","api/weather.js","components/WeatherPageContainer/index.jsx","actions/weatherActions.js","reducers/weatherReducers.js","reducers/index.js","store.js","App.js","index.js"],"names":["formatTemperature","temp","tempInCelsius","Math","round","getCityFromQueryParams","search","window","location","searchSplit","split","searchTerm","length","decodeURIComponent","setSearchParam","value","nextUrl","pathname","encodeURIComponent","history","pushState","DEFAULT_CITY","ControlsRow","handleWeatherSearch","isLoading","useState","city","setCity","useEffect","address","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","Promise","resolve","then","info","current","name","error","console","ref","usePlacesWidget","apiKey","process","onPlaceSelected","place","inputRef","formatted_address","document","activeElement","defaultValue","handleChange","e","target","trim","className","placeholder","onKeyDown","key","onChange","disabled","onClick","CurrentWeather","weather","humidity","feels_like","iconUrl","icon","temperature","temperatureFeelsLike","src","alt","ForecastWeather","daily","map","index","dt","minTemp","min","maxTemp","max","date","Date","toGMTString","dayOfWeek","slice","day","WeatherRows","code","forecast","GET_WEATHER_START","GET_WEATHER_SUCCESS","GET_WEATHER_ERROR","BASE_URL","fetchCityInfoByCoordinates","url","fetch","fetchCityInfoByName","term","fetchWeatherForecast","mapDispatchToProps","searchWeather","dispatch","a","type","fetchCity","Object","data","json","cod","coord","payload","connect","state","useCallback","initialState","weatherReducer","action","combineReducers","middlewares","thunk","store","createStore","rootReducer","applyMiddleware","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a234ede7.chunk.js","sourcesContent":["export const formatTemperature = temp => {\n    const tempInCelsius = Math.round(temp - 273);\n    const prefix = tempInCelsius > 0 ? '+' : '';\n    return prefix + tempInCelsius;\n};\n","export const getCityFromQueryParams = () => {\n    const search = window.location.search || '';\n    if (search) {\n        const searchSplit = search.split('search=');\n        const searchTerm = searchSplit[searchSplit.length - 1];\n        const parsedSearchTerm = decodeURIComponent(searchTerm);\n        return parsedSearchTerm;\n    }\n\n    return '';\n};\n\nexport const setSearchParam = value => {\n    const nextUrl = window.location.pathname + '?search=' + encodeURIComponent(value);\n    window.history.pushState(null, '', nextUrl);\n};\n","import React, { useState, useEffect } from 'react';\nimport { usePlacesWidget } from 'react-google-autocomplete';\nimport { setSearchParam, getCityFromQueryParams } from '../../utils';\nimport './styles.css';\n\nconst { REACT_APP_GOOGLE_PLACES_API_KEY } = process.env;\nconst DEFAULT_CITY = 'Moscow';\n\nfunction ControlsRow({ handleWeatherSearch, isLoading }) {\n    const [city, setCity] = useState('');\n\n    useEffect(() => {\n        const address = getCityFromQueryParams();\n        if (address) {\n            handleWeatherSearch(address);\n            setCity(address);\n        } else {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(onSuccess, onError);\n            }\n            function onSuccess(position) {\n                const lat = position.coords.latitude;\n                const lon = position.coords.longitude;\n                new Promise(resolve => resolve(handleWeatherSearch({ lat, lon }))).then(info => setCity(info.current.city.name));\n            }\n            function onError(error) {\n                console.error(error);\n                setCity(DEFAULT_CITY);\n                handleWeatherSearch(DEFAULT_CITY);\n            }\n        }\n    }, [handleWeatherSearch]);\n\n    const handleSelectPlace = (place, inputRef) => {\n        const { formatted_address } = place;\n        if (!formatted_address) return;\n\n        // To avoid double requests do not fire search request when user enters city manually\n        const isInputFocused = document.activeElement === inputRef;\n        if (!isInputFocused) handleWeatherSearch(formatted_address);\n\n        setSearchParam(formatted_address);\n        setCity(formatted_address);\n    };\n\n    const { ref } = usePlacesWidget({\n        apiKey: REACT_APP_GOOGLE_PLACES_API_KEY,\n        onPlaceSelected: handleSelectPlace,\n        defaultValue: getCityFromQueryParams()\n    });\n\n    const handleChange = e => {\n        const { value } = e.target;\n        setCity(value);\n        setSearchParam(value.trim());\n    };\n\n    const handleKeyDown = e => {\n        if (e.key === 'Enter') {\n            handleWeatherSearch(e.target.value);\n            handleChange(e);\n        }\n    };\n\n    return (\n        <div className=\"control-row-container\">\n            <div className=\"controls-row\">\n                <input\n                    placeholder=\"City\"\n                    className=\"search-input\"\n                    name=\"city\"\n                    value={city}\n                    onKeyDown={handleKeyDown}\n                    onChange={handleChange}\n                    ref={ref}\n                />\n\n                <button className=\"search-button\" disabled={isLoading} onClick={() => handleWeatherSearch(city)}>\n                    Get weather\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ControlsRow;\n","import React from 'react';\nimport { formatTemperature } from '../../../utils';\nimport './styles.css';\n\nfunction CurrentWeather({ weather, city }) {\n    const { current } = weather;\n    const {\n        temp,\n        humidity,\n        feels_like,\n        weather: {\n            0: { icon }\n        }\n    } = current;\n\n    const iconUrl = 'https://openweathermap.org/img/w/' + icon + '.png';\n    const temperature = formatTemperature(temp)\n    const temperatureFeelsLike = formatTemperature(feels_like)\n\n    return (\n        <div className=\"weather-info-container\">\n            <div>\n                <div>City: {city}</div>\n                <div>Temperature: {temperature}&deg;</div>\n                <div>Feels like: {temperatureFeelsLike}&deg;</div>\n                <div>Humidity: {humidity}%</div>\n            </div>\n            <img src={iconUrl} alt=\"\" />\n        </div>\n    );\n}\n\nexport default CurrentWeather;\n","import React from 'react';\nimport { formatTemperature } from '../../../utils';\nimport './styles.css';\n\nfunction ForecastWeather({ weather }) {\n    const { daily } = weather;\n\n    return (\n        <div className=\"weekly-weather-info\">\n            {daily.map((weather, index) => {\n                const {\n                    humidity,\n                    temp,\n                    weather: {\n                        0: { icon }\n                    },\n                    dt\n                } = weather;\n                const minTemp = formatTemperature(temp.min);\n                const maxTemp = formatTemperature(temp.max);\n                const iconUrl = 'https://openweathermap.org/img/w/' + icon + '.png';\n\n                const date = new Date(dt * 1000).toGMTString();\n                const dayOfWeek = date.slice(0, 3);\n                const day = date.slice(5, 11);\n\n                return (\n                    <div className=\"daily-weather-info\" key={index}>\n                        <div>{dayOfWeek}</div>\n                        <div>{day}</div>\n                        <img src={iconUrl} alt=\"\" />\n                        <div>\n                            {minTemp}&deg; ... {maxTemp}&deg;\n                        </div>\n                        <div>Humidity: {humidity}%</div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default ForecastWeather;\n","import React from 'react';\nimport CurrentWeather from './CurrentWeather';\nimport ForecastWeather from './ForecastWeather';\n\nfunction WeatherRows({ weather, error, isLoading }) {\n    if (isLoading) return <div>Loading...</div>;\n    if (error) {\n        if (error.code && error.code === 404) return <div>City not found</div>;\n        return <div>Error has occured</div>;\n    }\n    if (!weather) return null;\n\n    const { current, forecast } = weather;\n    return (\n        <>\n            <CurrentWeather weather={forecast} city={current.city.name} />\n            <ForecastWeather weather={forecast} />\n        </>\n    );\n}\n\nexport default WeatherRows;\n","export const GET_WEATHER_START = 'GET_WEATHER_START';\nexport const GET_WEATHER_SUCCESS = 'GET_WEATHER_SUCCESS';\nexport const GET_WEATHER_ERROR = 'GET_WEATHER_ERROR';\n","const BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\nexport const fetchCityInfoByCoordinates = ({ lat, lon }) => {\n    const url = `${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}`;\n    return fetch(url);\n};\n\nexport const fetchCityInfoByName = term => {\n    const url = `${BASE_URL}/forecast?q=${term}&appid=${process.env.REACT_APP_API_KEY}`;\n    return fetch(url);\n};\n\nexport const fetchWeatherForecast = ({ lat, lon }) => {\n    const url = `${BASE_URL}/onecall?appid=${process.env.REACT_APP_API_KEY}&lat=${lat}&lon=${lon}`;\n    return fetch(url);\n};\n","import React, { useCallback } from 'react';\nimport ControlsRow from '../ControlsRow';\nimport WeatherRows from '../WeatherRows';\nimport { connect } from 'react-redux';\nimport { searchWeather } from '../../actions/weatherActions';\nimport './styles.css';\n\nfunction WeatherPageContainer({ weather, searchWeather }) {\n    const { isLoading } = weather;\n\n    const handleWeatherSearch = useCallback(\n        async term => {\n            const searchTerm = term.trim ? term.trim() : term;\n\n            if (searchTerm) {\n                return await searchWeather(searchTerm);\n            }\n        },\n        [searchWeather]\n    );\n\n    return (\n        <div className=\"weather-container\">\n            <ControlsRow handleWeatherSearch={handleWeatherSearch} isLoading={isLoading} />\n            <WeatherRows {...weather} />\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return { weather: state.weather };\n};\n\nconst mapDispatchToProps = {\n    searchWeather\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherPageContainer);\n","import { GET_WEATHER_START, GET_WEATHER_SUCCESS, GET_WEATHER_ERROR } from './types';\nimport { fetchCityInfoByName, fetchWeatherForecast, fetchCityInfoByCoordinates } from '../api';\n\nexport const searchWeather = searchTerm => async dispatch => {\n    dispatch({ type: GET_WEATHER_START });\n\n    const searchByCoordinates = searchTerm instanceof Object;\n    const fetchCity = searchByCoordinates ? fetchCityInfoByCoordinates : fetchCityInfoByName;\n\n    try {\n        const current = await fetchCity(searchTerm).then(data => data.json());\n        if (current.cod === '404') {\n            throw { code: 404 };\n        }\n        const { coord } = current.city;\n        const forecast = await fetchWeatherForecast(coord).then(data => data.json());\n        const payload = { current, forecast };\n        dispatch({ type: GET_WEATHER_SUCCESS, payload });\n        return payload;\n    } catch (error) {\n        dispatch({ type: GET_WEATHER_ERROR, payload: error });\n        console.error(error);\n    }\n};\n","import { GET_WEATHER_START, GET_WEATHER_SUCCESS, GET_WEATHER_ERROR } from '../actions/types';\n\nconst initialState = {\n    isLoading: false,\n    error: null,\n    weather: null\n};\n\nfunction weatherReducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_WEATHER_START:\n            return {\n                ...state,\n                isLoading: true,\n                error: null\n            };\n        case GET_WEATHER_SUCCESS:\n            return {\n                ...state,\n                isLoading: false,\n                error: null,\n                weather: action.payload\n            };\n        case GET_WEATHER_ERROR:\n            return {\n                ...state,\n                isLoading: false,\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport default weatherReducer;\n","import { combineReducers } from 'redux';\nimport weatherReducer from './weatherReducers';\n\nexport default combineReducers({\n    weather: weatherReducer\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middlewares = [thunk];\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middlewares));\n\nexport default store;\n","import WeatherPageContainer from './components/WeatherPageContainer';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <WeatherPageContainer />\n        </Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}